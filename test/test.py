# SPDX-FileCopyrightText: Â© 2024 Tiny Tapeout
# SPDX-License-Identifier: Apache-2.0

import cocotb
from cocotb.clock import Clock
from cocotb.triggers import ClockCycles, FallingEdge, RisingEdge, Timer
from cocotb.utils import get_sim_time

from PIL import Image

async def do_start(dut, inputs = 0):
    dut._log.info("Start")

    # 36MHz clock
    clock = Clock(dut.clk, 27.778, units="ns")
    cocotb.start_soon(clock.start())

    dut.ena.value = 1
    dut.ui_in.value = inputs
    dut.uio_in.value = 0
    dut.rst_n.value = 1
    await ClockCycles(dut.clk, 2)

    # Reset
    dut._log.info("Reset")
    dut.rst_n.value = 0
    await ClockCycles(dut.clk, 2)

    dut.rst_n.value = 1

    assert dut.uio_oe.value == 0b10000000


async def audio_dump(dut, start):
    await do_start(dut, start)

    await ClockCycles(dut.clk, 5)
    assert dut.pwm.value == 1

    start_time = get_sim_time("us")
    
    sample_duration = 22
    last_pwm_state = 1
    last_sample_time = start_time
    last_edge_time = start_time
    high_time = 0
    samples = []


    while len(samples) < 1000:
        await FallingEdge(dut.pwm)
        cur_time = get_sim_time("us")
        while cur_time - last_sample_time >= sample_duration:
            high_time += sample_duration - (cur_time - last_sample_time)
            samples.append(int(1000 * high_time / sample_duration))
            high_time = 0
            last_sample_time += sample_duration
            #if len(samples) > 2:
            #    assert samples[-1] != samples[-2] or samples[-1] != samples[-3]
            last_edge_time = last_sample_time
        high_time += cur_time - last_edge_time
        
        await RisingEdge(dut.pwm)
        cur_time = get_sim_time("us")
        while cur_time - last_sample_time >= sample_duration:
            samples.append(int(1000 * high_time / sample_duration))
            high_time = 0
            last_sample_time += sample_duration
            #if len(samples) > 2:
            #    assert samples[-1] != samples[-2] or samples[-1] != samples[-3]

        last_edge_time = cur_time

    return samples

saved_samples = (
    [367, 409, 446, 476, 478, 665, 614, 604, 598, 422, 454, 459, 462, 446, 587, 539, 558, 595, 425, 459, 446, 417, 397, 521, 483, 472, 469, 476, 350, 344, 328, 313, 405, 395, 397, 373, 353, 237, 247, 255, 266, 347, 337, 333, 339, 351, 349, 259, 246, 237, 323, 339, 356, 375, 381, 396, 296, 315, 311, 389, 329, 372, 436, 502, 532, 360, 380, 368, 352, 344, 492, 529, 553, 560, 541, 363, 356, 356, 378, 409, 586, 529, 505, 482, 321, 347, 349, 349, 357, 524, 491, 467, 444, 438, 314, 330, 333, 318, 417, 397, 409, 428, 440, 305, 335, 340, 349, 357, 478, 457, 464, 481, 507, 379, 395, 397, 407, 419, 603, 537, 482, 438, 307, 376, 424, 453, 459, 445, 605, 577, 555, 551, 405, 415, 428, 417, 552, 491, 507, 541, 579, 410, 411, 380, 358, 464, 422, 410, 405, 407, 276, 306, 291, 277, 374, 362, 366, 351, 332, 311, 218, 234, 242, 377, 356, 372, 391, 406, 411, 280, 299, 289, 287, 299, 425, 444, 454, 487, 513, 368, 367, 367, 332, 327, 536, 588, 619, 603, 402, 415, 410, 405, 405, 419, 446, 650, 631, 597, 402, 407, 425, 457, 462, 457, 574, 542, 526, 358, 373, 371, 361, 363, 499, 455, 429, 426, 434, 324, 330, 323, 315, 410, 414, 428, 435, 433, 296, 314, 315, 316, 422, 385, 386, 401, 430, 449, 339, 342, 345, 354, 503, 446, 396, 351, 375, 297, 362, 397, 409, 405, 568, 530, 526, 529, 362, 415, 426, 420, 396, 528, 508, 544, 589, 602, 423, 410, 385, 373, 366, 490, 489, 500, 506, 343, 364, 349, 343, 347, 497, 477, 462, 448, 443, 320, 337, 359, 364, 366, 504, 510, 511, 493, 328, 345, 349, 364, 383, 401, 561, 570, 589, 593, 416, 406, 363, 348, 383, 431, 689, 669, 652, 439, 448, 444, 430, 438, 455, 473, 636, 595, 560, 400, 414, 449, 468, 470, 617, 551, 532, 516, 355, 367, 352, 356, 356, 459, 439, 435, 430, 291, 321, 313, 284, 358, 334, 344, 357, 364, 371, 278, 271, 276, 361, 313, 309, 318, 337, 352, 247, 273, 276, 287, 423, 377, 340, 297, 308, 373, 317, 371, 385, 380, 371, 490, 482, 478, 489, 344, 381, 380, 369, 352, 501, 530, 577, 598, 580, 395, 376, 344, 333, 463, 446, 453, 468, 479, 326, 344, 337, 340, 352, 456, 436, 407, 396, 397, 303, 315, 324, 325, 462, 460, 468, 464, 443, 306, 328, 339, 351, 376, 548, 549, 565, 571, 380, 393, 354, 329, 356, 401, 436, 638, 621, 604, 418, 424, 415, 420, 436, 449, 600, 545, 503, 333, 378, 407, 433, 439, 415, 511, 486, 460, 443, 315, 309, 313, 315, 407, 375, 368, 368, 376, 262, 284, 263, 342, 308, 320, 330, 338, 340, 345, 270, 284, 291, 399, 363, 375, 406, 429, 436, 304, 328, 332, 351, 351, 434, 397, 407, 467, 563, 439, 459, 452, 438, 424, 579, 550, 565, 594, 424, 439, 436, 412, 398, 424, 671, 671, 659, 423, 429, 398, 387, 376, 531, 505, 510, 510, 497, 332, 335, 334, 337, 471, 429, 407, 393, 393, 272, 319, 329, 332, 330, 466, 453, 431, 406, 381, 275, 294, 303, 323, 472, 467, 483, 491, 476, 312, 296, 263, 277, 327, 372, 554, 539, 529, 521, 371, 373, 380, 398, 419, 606, 542, 510, 503, 356, 407, 433, 440, 422, 565, 505, 493, 482, 474, 347, 357, 362, 361, 498, 463, 469, 481, 482, 336, 339, 327, 318, 473, 468, 479, 486, 491, 334, 380, 380, 363, 351, 493, 486, 503, 522, 535, 380, 405, 422, 425, 410, 493, 470, 522, 595, 431, 486, 487, 476, 462, 453, 647, 622, 641, 657, 462, 457, 431, 411, 419, 450, 686, 657, 626, 404, 409, 400, 382, 374, 531, 508, 506, 493, 457, 321, 325, 330, 339, 459, 409, 387, 378, 377, 262, 290, 281, 280, 386, 386, 385, 364, 325, 316, 245, 256, 268, 394, 377, 387, 392, 381, 347, 220, 199, 226, 270, 323, 505, 494, 498, 486, 477, 345, 345, 367, 385, 395, 491, 450, 436, 459, 351, 412, 425, 422, 400, 521, 483, 468, 448, 291, 319, 334, 335, 323, 429, 443, 454, 473, 465, 323, 328, 305, 303, 436, 430, 435, 438, 448, 311, 342, 332, 320, 309, 451, 468, 487, 498, 506, 364, 401, 404, 396, 505, 444, 491, 556, 623, 443, 467, 453, 436, 428, 421, 600, 612, 630, 628, 435, 414, 387, 377, 407, 424, 605, 578, 540, 360, 368, 356, 344, 338, 453, 444, 426, 395, 380, 284, 289, 291, 403, 352, 333, 325, 330, 338, 251, 263, 262, 382, 359, 357, 339, 334, 333, 236, 286, 301, 313, 329, 472, 469, 460, 429, 377, 248, 273, 315, 378, 421, 438, 614, 599, 587, 391, 414, 429, 431, 443, 433, 556, 526, 549, 606, 453, 478, 481, 459, 429, 588, 544, 523, 507, 349, 374, 376, 364, 351, 482, 479, 472, 463, 440, 311, 299, 295, 303, 438, 434, 440, 454, 465, 326, 337, 323, 316, 425, 422, 428, 436, 440, 452, 342, 352, 345, 442, 358, 390, 457, 516, 545, 383, 391, 378, 373, 368, 518, 534, 561, 575, 381, 388, 364, 362, 388, 421, 639, 587, 550, 521, 359, 363, 356, 349, 349, 485, 478, 463, 450, 304, 342, 351, 353, 345, 450, 428, 436, 453, 464, 337, 347, 352, 363, 369, 498, 479, 474, 482, 337, 377, 383, 383, 387, 400, 565, 536, 491, 453, 333, 376, 430, 463, 474, 476, 658, 631, 625, 424, 457, 472, 486, 479, 446, 586, 582, 619, 661, 489, 487, 464, 429, 412, 556, 526, 518, 522, 363, 377, 372, 354, 344, 473, 460, 454, 435, 280, 303, 303, 301, 309, 420, 409, 395, 401, 390, 275, 272, 260, 385, 375, 369, 371, 367, 376, 264, 301, 294, 355, 261, 281, 343, 407, 460, 469, 330, 338, 333, 335, 492, 494, 518, 530, 513, 335, 338, 332, 348, 373, 395, 535, 523, 498],
    [232, 311, 398, 496, 535, 532, 540, 746, 736, 516, 536, 540, 544, 536, 518, 494, 698, 699, 480, 491, 481, 463, 458, 454, 679, 627, 607, 595, 427, 412, 396, 374, 507, 459, 449, 412, 382, 248, 243, 234, 346, 319, 335, 354, 373, 397, 391, 287, 270, 263, 382, 388, 400, 404, 393, 401, 296, 319, 313, 361, 284, 315, 371, 440, 481, 329, 362, 353, 342, 335, 506, 551, 570, 558, 496, 304, 271, 267, 308, 382, 419, 580, 550, 517, 340, 361, 359, 359, 359, 544, 522, 507, 481, 455, 308, 304, 285, 384, 376, 407, 448, 483, 484, 324, 342, 333, 333, 334, 420, 404, 415, 439, 473, 358, 373, 368, 369, 376, 511, 468, 411, 353, 255, 291, 334, 356, 364, 504, 492, 494, 486, 489, 366, 387, 407, 402, 504, 439, 445, 483, 534, 387, 407, 386, 368, 484, 434, 422, 405, 387, 243, 239, 218, 143, 193, 260, 347, 404, 425, 420, 308, 321, 332, 356, 358, 501, 525, 550, 565, 387, 390, 363, 344, 333, 506, 530, 571, 633, 672, 475, 467, 444, 395, 397, 428, 470, 697, 665, 445, 448, 438, 421, 393, 398, 610, 627, 632, 618, 420, 430, 448, 482, 483, 482, 638, 595, 569, 379, 390, 378, 366, 368, 492, 431, 386, 369, 369, 282, 294, 297, 424, 390, 401, 425, 449, 454, 311, 320, 300, 338, 271, 281, 320, 393, 457, 496, 371, 364, 363, 369, 520, 454, 405, 372, 409, 326, 391, 419, 404, 383, 475, 469, 497, 537, 389, 452, 462, 440, 400, 502, 476, 507, 540, 550, 388, 381, 359, 351, 481, 431, 426, 433, 439, 298, 320, 299, 284, 359, 339, 334, 328, 332, 343, 264, 286, 311, 325, 483, 473, 482, 474, 440, 286, 301, 313, 342, 377, 406, 586, 587, 608, 608, 424, 409, 332, 385, 364, 414, 502, 585, 633, 448, 506, 513, 507, 529, 542, 561, 801, 715, 694, 494, 522, 560, 564, 544, 493, 604, 594, 603, 424, 465, 458, 458, 446, 604, 540, 531, 526, 352, 376, 357, 327, 423, 367, 352, 334, 327, 332, 257, 257, 285, 396, 344, 343, 348, 373, 396, 282, 314, 308, 315, 453, 388, 352, 303, 303, 352, 291, 334, 344, 338, 478, 457, 460, 460, 478, 337, 388, 393, 381, 353, 419, 420, 445, 501, 537, 383, 388, 376, 364, 503, 465, 472, 479, 484, 330, 357, 354, 374, 387, 479, 407, 353, 324, 337, 275, 314, 347, 362, 514, 474, 460, 438, 410, 284, 297, 304, 314, 344, 503, 513, 523, 515, 338, 351, 311, 286, 315, 521, 517, 506, 481, 460, 324, 342, 347, 359, 380, 583, 539, 506, 474, 317, 353, 368, 391, 396, 537, 493, 487, 477, 462, 330, 319, 330, 327, 388, 297, 224, 170, 156, 133, 203, 229, 260, 409, 426, 450, 465, 469, 479, 354, 367, 376, 382, 381, 542, 532, 523, 498, 335, 363, 386, 428, 445, 438, 543, 532, 566, 666, 501, 522, 511, 494, 473, 459, 604, 598, 598, 415, 421, 405, 390, 388, 425, 473, 699, 689, 441, 450, 425, 426, 415, 407, 549, 537, 525, 508, 338, 337, 325, 310, 391, 369, 353, 354, 363, 255, 305, 320, 327, 335, 494, 462, 409, 340, 277, 187, 214, 268, 313, 344, 518, 521, 518, 497, 326, 306, 265, 281, 338, 398, 624, 580, 544, 498, 335, 325, 334, 372, 417, 453, 594, 547, 515, 349, 392, 410, 416, 392, 494, 454, 450, 446, 436, 319, 320, 320, 315, 418, 401, 402, 395, 377, 254, 249, 229, 312, 332, 372, 397, 409, 429, 299, 352, 358, 349, 324, 412, 421, 444, 484, 517, 376, 412, 439, 438, 422, 527, 481, 498, 521, 343, 369, 335, 349, 388, 416, 450, 486, 738, 771, 536, 532, 517, 497, 499, 541, 574, 588, 789, 496, 473, 443, 415, 409, 426, 455, 660, 642, 590, 400, 393, 393, 401, 400, 500, 465, 448, 448, 304, 320, 296, 270, 338, 349, 361, 357, 334, 339, 252, 268, 285, 297, 430, 448, 452, 436, 386, 245, 215, 234, 280, 324, 468, 446, 441, 428, 430, 316, 324, 348, 372, 555, 491, 465, 455, 467, 345, 376, 362, 342, 485, 476, 496, 501, 492, 318, 340, 347, 344, 332, 434, 457, 486, 520, 521, 360, 343, 300, 376, 354, 380, 414, 460, 492, 340, 372, 340, 310, 422, 412, 426, 438, 445, 455, 333, 374, 381, 369, 427, 378, 428, 500, 560, 404, 415, 385, 356, 483, 436, 457, 497, 532, 544, 385, 366, 352, 347, 385, 585, 554, 516, 476, 318, 335, 338, 339, 344, 480, 467, 450, 424, 396, 285, 255, 257, 175, 147, 175, 244, 315, 364, 298, 329, 323, 340, 349, 493, 464, 462, 482, 343, 396, 414, 407, 395, 553, 525, 530, 536, 508, 345, 376, 405, 463, 487, 499, 497, 692, 670, 444, 467, 474, 476, 470, 449, 532, 489, 512, 583, 440, 479, 489, 464, 443, 618, 580, 573, 568, 391, 417, 411, 387, 366, 502, 489, 463, 435, 392, 272, 258, 263, 275, 401, 412, 422, 443, 467, 334, 352, 332, 311, 329, 305, 323, 368, 414, 465, 370, 385, 369, 340, 374, 401, 463, 521, 558, 404, 420, 417, 410, 383, 476, 469, 497, 527, 365, 398, 391, 395, 410, 428, 614, 558, 515, 478, 326, 327, 320, 318, 464, 441, 426, 401, 385, 261, 304, 314, 313, 394, 327, 299, 294, 308, 333, 257, 279, 290, 308, 455, 440, 439, 444, 445, 304, 337, 338, 344, 357, 377, 566, 553, 512, 477, 351, 402, 448, 460, 453, 530, 440, 438, 468, 346, 441, 487, 531, 534, 506, 493, 712, 747, 792, 574, 583, 573, 545, 516, 496, 616, 579, 579, 415, 443, 457, 452, 448, 435, 563, 544, 522, 339, 357, 359, 356, 362, 517, 469, 429, 409, 371, 251, 247, 237, 370, 377, 377, 375, 386, 395, 283, 330, 334, 310, 333, 330, 377, 431, 479, 482, 331, 324, 303, 299, 423, 449, 487, 505, 494, 322, 328, 328, 359, 387, 582, 498, 445, 381],
    [226, 251, 300, 378, 424, 474, 532, 820, 824, 584, 578, 565, 551, 535, 522, 502, 673, 659, 440, 459, 469, 460, 470, 460, 474, 689, 680, 685, 487, 481, 478, 472, 464, 439, 602, 568, 566, 386, 395, 392, 393, 380, 530, 532, 537, 575, 587, 437, 444, 441, 426, 417, 533, 506, 477, 467, 322, 333, 334, 324, 452, 410, 392, 381, 373, 249, 284, 287, 284, 412, 391, 419, 415, 407, 396, 279, 280, 258, 333, 299, 290, 297, 320, 332, 230, 272, 287, 294, 435, 405, 401, 386, 357, 339, 232, 228, 289, 252, 256, 265, 284, 308, 329, 232, 286, 292, 304, 446, 425, 435, 455, 470, 492, 367, 382, 388, 392, 545, 467, 414, 376, 330, 223, 255, 267, 291, 316, 498, 521, 545, 550, 556, 402, 396, 395, 388, 388, 533, 525, 517, 526, 372, 392, 405, 411, 398, 563, 502, 453, 410, 236, 222, 244, 190, 224, 267, 325, 405, 476, 544, 420, 453, 468, 487, 478, 470, 654, 604, 588, 395, 411, 405, 396, 382, 539, 506, 508, 540, 569, 411, 444, 476, 494, 497, 496, 713, 660, 622, 422, 419, 414, 398, 380, 544, 522, 542, 565, 595, 425, 443, 465, 491, 491, 497, 720, 671, 645, 422, 439, 416, 391, 380, 518, 483, 467, 457, 443, 316, 311, 297, 300, 400, 405, 415, 425, 429, 303, 319, 319, 311, 405, 376, 376, 371, 388, 395, 303, 304, 305, 429, 375, 351, 320, 294, 273, 202, 226, 234, 374, 375, 392, 405, 421, 429, 293, 325, 333, 333, 335, 460, 450, 445, 441, 440, 317, 343, 352, 369, 383, 572, 554, 544, 518, 332, 345, 324, 305, 422, 410, 435, 462, 503, 536, 399, 412, 434, 434, 424, 599, 558, 549, 541, 370, 392, 400, 412, 416, 430, 613, 588, 587, 565, 388, 397, 335, 429, 345, 321, 335, 382, 428, 306, 377, 414, 443, 482, 479, 507, 702, 669, 647, 449, 430, 431, 414, 415, 582, 555, 555, 546, 376, 393, 382, 392, 407, 415, 640, 635, 632, 419, 439, 414, 385, 361, 429, 393, 373, 377, 390, 302, 296, 337, 345, 369, 400, 598, 618, 625, 426, 440, 420, 396, 377, 451, 391, 357, 327, 333, 259, 285, 310, 319, 345, 489, 508, 508, 502, 342, 357, 362, 364, 372, 525, 493, 473, 458, 441, 320, 321, 315, 321, 484, 478, 482, 481, 478, 321, 344, 327, 324, 435, 411, 404, 412, 419, 425, 317, 325, 323, 321, 438, 421, 426, 424, 424, 300, 320, 315, 311, 471, 454, 476, 491, 502, 341, 374, 378, 358, 348, 418, 388, 377, 372, 373, 273, 297, 306, 314, 451, 439, 425, 417, 405, 275, 299, 297, 303, 449, 436, 452, 462, 462, 455, 328, 309, 306, 383, 324, 268, 229, 184, 160, 111, 157, 171, 261, 318, 363, 424, 473, 497, 539, 401, 410, 412, 417, 405, 588, 564, 570, 563, 383, 404, 388, 386, 366, 520, 502, 515, 530, 616, 455, 486, 520, 536, 542, 539, 523, 679, 650, 434, 434, 440, 448, 458, 476, 516, 764, 780, 527, 582, 579, 593, 575, 580, 553, 760, 662, 625, 411, 401, 388, 381, 369, 538, 532, 550, 556, 380, 415, 417, 411, 400, 564, 506, 479, 463, 428, 305, 297, 279, 386, 348, 362, 368, 377, 385, 272, 297, 296, 292, 378, 347, 333, 316, 310, 297, 221, 232, 228, 297, 303, 303, 303, 311, 311, 224, 244, 249, 370, 345, 353, 357, 367, 378, 388, 294, 304, 311, 315, 447, 424, 416, 392, 367, 254, 258, 249, 351, 335, 362, 387, 411, 446, 315, 361, 369, 377, 378, 382, 537, 542, 565, 592, 420, 444, 449, 434, 416, 533, 452, 401, 371, 227, 266, 263, 279, 328, 363, 594, 660, 683, 734, 527, 547, 565, 571, 559, 555, 540, 731, 713, 472, 499, 507, 497, 498, 501, 488, 651, 630, 607, 430, 444, 452, 476, 487, 505, 513, 741, 707, 467, 455, 425, 387, 364, 468, 465, 473, 473, 497, 355, 396, 410, 424, 431, 622, 571, 558, 522, 355, 366, 330, 323, 418, 388, 385, 398, 395, 393, 295, 292, 291, 412, 382, 367, 359, 351, 349, 258, 280, 282, 284, 374, 359, 348, 334, 328, 214, 244, 251, 267, 386, 390, 407, 407, 406, 391, 275, 268, 238, 275, 260, 256, 265, 280, 303, 213, 261, 272, 281, 416, 410, 419, 434, 444, 452, 326, 351, 353, 344, 476, 430, 409, 401, 415, 294, 311, 330, 334, 357, 514, 513, 520, 522, 526, 381, 387, 395, 385, 390, 523, 512, 516, 525, 375, 398, 419, 422, 441, 444, 575, 527, 484, 438, 301, 261, 300, 250, 238, 258, 328, 372, 406, 327, 377, 380, 412, 422, 426, 599, 585, 578, 390, 409, 406, 393, 397, 396, 531, 520, 518, 508, 363, 376, 382, 402, 416, 439, 679, 684, 693, 469, 493, 476, 462, 417, 572, 492, 473, 462, 484, 350, 381, 422, 443, 479, 492, 515, 736, 712, 477, 488, 478, 455, 431, 419, 565, 521, 497, 470, 330, 319, 306, 299, 391, 395, 410, 429, 446, 317, 345, 348, 356, 482, 438, 421, 412, 400, 390, 289, 287, 279, 367, 320, 308, 290, 297, 325, 241, 280, 295, 316, 441, 429, 420, 411, 401, 263, 299, 295, 303, 306, 424, 428, 435, 443, 455, 333, 349, 358, 368, 373, 520, 503, 496, 486, 321, 348, 339, 337, 337, 475, 477, 487, 496, 505, 362, 371, 372, 371, 373, 532, 522, 531, 530, 358, 383, 382, 381, 381, 388, 569, 588, 598, 603, 424, 421, 402, 361, 465, 391, 362, 330, 328, 256, 287, 310, 367, 396, 407, 648, 641, 657, 666, 474, 474, 476, 463, 452, 455, 599, 595, 584, 393, 412, 404, 401, 404, 597, 574, 584, 592, 400, 429, 444, 433, 422, 411, 535, 479, 464, 431, 297, 308, 304, 327, 329, 498, 520, 570, 593, 413, 449, 448, 424, 405, 483, 402, 363, 376, 385, 283, 320, 325, 359, 368, 539, 512, 502, 487, 330, 352, 351, 349, 343, 471, 459, 486, 488]
)

@cocotb.test()
async def test_audio(dut):

    for i in range(1, 4):
        samples = await audio_dump(dut, i)

        #print(samples)

        for j in range(len(samples)):
            assert samples[j] == saved_samples[i-1][j]


@cocotb.test()
async def test_sync(dut):
    await do_start(dut)

    dut._log.info("Test sync")

    await ClockCycles(dut.clk, 1)

    for i in range(25):
        vsync = 1 if i in (1, 2) else 0
        for j in range(800):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        vsync = 1 if i in (0, 1) else 0
        for j in range(24):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(72):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 1
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(128):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)

    # First frame
    for i in range(600):
        for j in range(799):  # TODO This is wrong
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            assert dut.rgb.value == 1
            await ClockCycles(dut.clk, 1)
        for j in range(25):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(72):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 1
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(128):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)

    for i in range(25):
        vsync = 1 if i in (1, 2) else 0
        for j in range(800):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        vsync = 1 if i in (0, 1) else 0
        for j in range(24):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(72):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 1
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(128):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)

    # Beginning second frame
    for i in range(25):
        for j in range(799):  # TODO This is wrong
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            assert dut.rgb.value == 1
            await ClockCycles(dut.clk, 1)
        for j in range(25):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(72):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 1
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(128):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)

async def frame_dump(dut, frame, filename):
    await do_start(dut, frame << 3)

    await ClockCycles(dut.clk, 1)

    for i in range(25):
        vsync = 1 if i in (1, 2) else 0
        for j in range(800):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        vsync = 1 if i in (0, 1) else 0
        for j in range(24):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(72):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 1
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(128):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)

    
    image = Image.new("RGB", (800, 600))

    for i in range(600):
        for j in range(800):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            red = dut.red.value * 85
            green = dut.green.value * 85
            blue = dut.blue.value * 85
            image.putpixel((j, i), (red, green, blue))
            await ClockCycles(dut.clk, 1)
        for j in range(24):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(72):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 1
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(128):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)

    image.save(filename)

@cocotb.test()
async def test_frames(dut):
    await frame_dump(dut,  2, "frame02.png")
    await frame_dump(dut,  4, "frame04.png")
    await frame_dump(dut,  8, "frame08.png")
    await frame_dump(dut, 12, "frame12.png")
    await frame_dump(dut, 13, "frame13.png")
    await frame_dump(dut, 14, "frame14.png")
    await frame_dump(dut, 16, "frame16.png")
    await frame_dump(dut, 17, "frame17.png")
    await frame_dump(dut, 18, "frame18.png")
    await frame_dump(dut, 19, "frame19.png")
    await frame_dump(dut, 20, "frame20.png")
    await frame_dump(dut, 23, "frame23.png")
    await frame_dump(dut, 24, "frame24.png")
    await frame_dump(dut, 28, "frame28.png")
