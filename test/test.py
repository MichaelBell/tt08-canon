# SPDX-FileCopyrightText: Â© 2024 Tiny Tapeout
# SPDX-License-Identifier: Apache-2.0

import cocotb
from cocotb.clock import Clock
from cocotb.triggers import ClockCycles, FallingEdge, RisingEdge, Timer
from cocotb.utils import get_sim_time

from PIL import Image

async def do_start(dut, inputs = 0):
    dut._log.info("Start")

    # 36MHz clock
    clock = Clock(dut.clk, 27.778, units="ns")
    cocotb.start_soon(clock.start())

    dut.ena.value = 1
    dut.ui_in.value = inputs
    dut.uio_in.value = 0
    dut.rst_n.value = 1
    await ClockCycles(dut.clk, 2)

    # Reset
    dut._log.info("Reset")
    dut.rst_n.value = 0
    await ClockCycles(dut.clk, 2)

    dut.rst_n.value = 1

    assert dut.uio_oe.value == 0b10000000


async def audio_dump(dut, start):
    await do_start(dut, start)

    await ClockCycles(dut.clk, 5)
    assert dut.pwm.value == 1

    start_time = get_sim_time("us")
    
    sample_duration = 22
    last_pwm_state = 1
    last_sample_time = start_time
    last_edge_time = start_time
    high_time = 0
    samples = []


    while len(samples) < 1000:
        await FallingEdge(dut.pwm)
        cur_time = get_sim_time("us")
        while cur_time - last_sample_time >= sample_duration:
            high_time += sample_duration - (cur_time - last_sample_time)
            samples.append(int(1000 * high_time / sample_duration))
            high_time = 0
            last_sample_time += sample_duration
            #if len(samples) > 2:
            #    assert samples[-1] != samples[-2] or samples[-1] != samples[-3]
            last_edge_time = last_sample_time
        high_time += cur_time - last_edge_time
        
        await RisingEdge(dut.pwm)
        cur_time = get_sim_time("us")
        while cur_time - last_sample_time >= sample_duration:
            samples.append(int(1000 * high_time / sample_duration))
            high_time = 0
            last_sample_time += sample_duration
            #if len(samples) > 2:
            #    assert samples[-1] != samples[-2] or samples[-1] != samples[-3]

        last_edge_time = cur_time

    return samples

saved_samples = (
    [367, 409, 446, 476, 478, 665, 614, 604, 598, 422, 454, 459, 462, 446, 587, 539, 560, 595, 425, 459, 446, 419, 397, 521, 483, 472, 469, 476, 350, 344, 328, 313, 413, 395, 397, 373, 353, 237, 247, 255, 266, 347, 339, 333, 339, 351, 349, 258, 246, 237, 323, 339, 356, 375, 381, 396, 293, 315, 311, 389, 329, 372, 436, 502, 532, 359, 380, 368, 352, 345, 491, 520, 553, 560, 541, 363, 356, 356, 378, 419, 586, 529, 505, 482, 320, 340, 351, 348, 357, 524, 491, 472, 444, 438, 317, 330, 333, 318, 417, 397, 409, 426, 440, 303, 335, 340, 348, 357, 475, 450, 464, 479, 507, 377, 393, 400, 405, 419, 604, 539, 484, 438, 307, 376, 424, 453, 459, 444, 607, 578, 561, 551, 411, 414, 429, 419, 554, 492, 510, 541, 580, 410, 417, 382, 353, 469, 424, 411, 407, 407, 275, 306, 292, 277, 377, 362, 366, 354, 333, 313, 218, 234, 246, 373, 354, 364, 386, 404, 411, 275, 297, 292, 289, 297, 426, 440, 450, 476, 508, 372, 373, 347, 330, 328, 539, 589, 619, 608, 402, 415, 410, 405, 404, 412, 443, 644, 630, 597, 404, 409, 430, 463, 460, 457, 577, 542, 526, 358, 373, 366, 369, 364, 501, 460, 430, 428, 434, 324, 329, 323, 311, 410, 414, 429, 439, 439, 301, 315, 319, 316, 424, 381, 386, 400, 422, 449, 339, 340, 345, 356, 505, 446, 396, 351, 373, 296, 359, 395, 409, 404, 566, 529, 525, 529, 362, 414, 426, 420, 397, 528, 510, 544, 589, 604, 423, 410, 386, 372, 366, 488, 482, 498, 506, 343, 362, 349, 343, 347, 497, 477, 462, 445, 440, 320, 339, 352, 363, 368, 506, 510, 511, 494, 329, 342, 349, 363, 382, 396, 561, 565, 587, 593, 418, 401, 362, 347, 383, 430, 691, 671, 654, 444, 446, 443, 434, 438, 455, 473, 637, 599, 568, 405, 416, 449, 470, 469, 622, 553, 535, 521, 358, 362, 363, 358, 357, 461, 439, 435, 438, 295, 324, 315, 290, 361, 344, 348, 357, 362, 368, 269, 296, 282, 366, 311, 308, 315, 335, 354, 247, 276, 276, 286, 415, 376, 332, 291, 303, 367, 303, 369, 385, 380, 369, 487, 478, 479, 493, 346, 385, 377, 349, 352, 491, 525, 577, 597, 585, 398, 378, 358, 337, 456, 439, 449, 459, 467, 328, 332, 335, 339, 347, 467, 439, 415, 396, 397, 303, 313, 324, 327, 459, 458, 465, 458, 443, 303, 327, 337, 352, 359, 546, 536, 563, 569, 379, 392, 352, 330, 357, 401, 443, 642, 621, 606, 419, 424, 416, 424, 436, 450, 610, 553, 515, 333, 380, 406, 434, 436, 422, 514, 489, 473, 452, 315, 325, 313, 316, 411, 378, 371, 371, 376, 262, 284, 268, 347, 314, 323, 333, 339, 340, 345, 258, 282, 281, 381, 358, 369, 391, 425, 439, 305, 328, 337, 345, 488, 412, 381, 395, 453, 532, 437, 460, 457, 441, 428, 594, 550, 565, 592, 422, 441, 426, 405, 395, 412, 449, 680, 665, 426, 431, 412, 390, 378, 533, 505, 510, 510, 497, 346, 335, 338, 339, 487, 433, 407, 393, 392, 272, 309, 328, 332, 333, 471, 463, 444, 412, 393, 281, 294, 308, 314, 467, 455, 477, 489, 477, 313, 300, 265, 280, 327, 373, 549, 537, 523, 516, 369, 367, 376, 397, 415, 601, 541, 508, 503, 356, 409, 435, 440, 426, 565, 506, 493, 482, 473, 345, 354, 361, 358, 490, 462, 467, 478, 483, 337, 339, 327, 318, 473, 460, 474, 482, 487, 328, 380, 380, 367, 352, 493, 488, 505, 518, 526, 375, 398, 417, 422, 407, 485, 467, 518, 588, 428, 483, 484, 474, 463, 454, 651, 628, 650, 661, 465, 457, 431, 411, 420, 446, 702, 661, 630, 409, 415, 397, 390, 378, 534, 513, 512, 497, 473, 329, 329, 333, 338, 464, 420, 396, 386, 391, 282, 291, 292, 291, 391, 386, 378, 364, 349, 330, 251, 263, 267, 389, 373, 390, 400, 386, 347, 221, 194, 217, 266, 311, 492, 487, 476, 472, 476, 344, 345, 362, 382, 393, 501, 463, 438, 458, 341, 391, 417, 416, 393, 519, 491, 478, 463, 305, 333, 328, 325, 319, 413, 422, 444, 457, 454, 323, 324, 314, 311, 447, 435, 435, 436, 444, 309, 340, 329, 316, 454, 439, 464, 482, 489, 501, 365, 387, 391, 387, 490, 439, 484, 550, 618, 444, 469, 455, 441, 434, 424, 600, 613, 631, 632, 439, 417, 396, 390, 411, 438, 619, 580, 542, 360, 367, 361, 352, 343, 470, 465, 445, 414, 392, 285, 290, 296, 408, 358, 338, 327, 333, 348, 252, 271, 272, 387, 362, 356, 339, 323, 319, 226, 271, 292, 308, 311, 455, 472, 468, 434, 381, 243, 263, 311, 358, 392, 420, 573, 565, 587, 395, 417, 429, 445, 452, 440, 553, 522, 542, 585, 434, 476, 467, 443, 433, 607, 555, 539, 532, 364, 381, 380, 364, 351, 482, 479, 484, 479, 449, 317, 310, 313, 306, 434, 431, 433, 441, 455, 325, 339, 324, 316, 460, 441, 446, 449, 444, 449, 339, 340, 339, 426, 354, 388, 458, 520, 551, 388, 393, 380, 371, 367, 508, 521, 553, 564, 373, 383, 361, 358, 385, 420, 638, 587, 551, 522, 360, 366, 359, 348, 351, 488, 477, 459, 443, 300, 334, 340, 339, 343, 445, 428, 438, 454, 464, 337, 347, 351, 356, 362, 485, 464, 463, 478, 338, 378, 385, 387, 388, 400, 554, 520, 473, 435, 325, 371, 425, 454, 470, 468, 646, 623, 618, 420, 458, 477, 488, 482, 455, 600, 589, 625, 664, 489, 487, 463, 438, 421, 576, 539, 530, 531, 369, 386, 380, 357, 349, 488, 481, 474, 453, 285, 306, 301, 310, 320, 439, 426, 430, 431, 417, 289, 282, 265, 380, 369, 391, 402, 400, 391, 267, 299, 291, 356, 267, 291, 349, 407, 446, 455, 317, 327, 321, 321, 453, 463, 502, 525, 510, 331, 334, 327, 344, 383, 405, 544, 496, 463],
    [232, 311, 398, 496, 535, 532, 540, 746, 736, 516, 540, 540, 544, 536, 518, 494, 698, 699, 480, 491, 481, 463, 458, 454, 679, 627, 607, 595, 427, 412, 396, 377, 507, 459, 449, 412, 382, 249, 243, 234, 346, 319, 338, 354, 373, 397, 391, 286, 270, 263, 382, 388, 400, 404, 393, 401, 293, 319, 313, 361, 284, 314, 371, 440, 481, 327, 363, 353, 342, 337, 505, 541, 570, 558, 496, 306, 270, 270, 308, 392, 419, 580, 550, 517, 338, 354, 361, 358, 359, 544, 522, 512, 481, 455, 311, 304, 285, 384, 376, 407, 446, 482, 484, 322, 342, 333, 332, 334, 417, 397, 415, 438, 473, 357, 372, 371, 367, 376, 512, 469, 414, 353, 255, 291, 335, 356, 364, 506, 492, 494, 492, 492, 372, 387, 407, 404, 504, 440, 448, 483, 535, 387, 414, 388, 363, 489, 434, 422, 406, 387, 242, 241, 219, 143, 195, 260, 347, 404, 426, 421, 308, 321, 335, 352, 357, 493, 522, 547, 565, 382, 388, 364, 345, 333, 506, 527, 569, 619, 669, 475, 473, 434, 393, 400, 426, 472, 698, 670, 445, 446, 436, 422, 392, 393, 606, 622, 631, 618, 422, 434, 450, 488, 482, 482, 640, 595, 569, 379, 390, 373, 374, 371, 495, 436, 387, 371, 369, 282, 292, 297, 419, 390, 401, 425, 452, 460, 316, 321, 301, 338, 272, 279, 316, 392, 449, 493, 371, 363, 364, 371, 524, 454, 405, 371, 407, 326, 388, 416, 404, 382, 472, 468, 494, 537, 389, 450, 462, 440, 400, 502, 477, 507, 540, 551, 388, 381, 361, 351, 479, 429, 419, 431, 439, 298, 320, 299, 284, 359, 339, 334, 328, 325, 340, 264, 287, 306, 325, 485, 474, 482, 474, 440, 289, 299, 313, 342, 377, 401, 586, 582, 606, 607, 425, 404, 330, 382, 364, 415, 503, 587, 635, 454, 507, 512, 511, 529, 542, 561, 804, 720, 698, 498, 525, 563, 565, 542, 498, 607, 597, 608, 426, 460, 470, 460, 448, 606, 541, 532, 534, 355, 381, 358, 333, 426, 377, 356, 335, 325, 330, 249, 281, 290, 401, 343, 340, 347, 372, 398, 282, 316, 309, 314, 446, 387, 342, 296, 297, 345, 273, 333, 343, 337, 478, 455, 457, 462, 482, 341, 390, 392, 362, 498, 414, 415, 445, 500, 542, 385, 391, 391, 366, 495, 462, 468, 470, 472, 332, 343, 353, 373, 382, 491, 412, 361, 324, 337, 277, 311, 347, 361, 512, 472, 455, 433, 410, 280, 297, 301, 318, 328, 500, 501, 521, 512, 338, 345, 311, 287, 316, 523, 521, 507, 481, 462, 326, 342, 348, 363, 380, 595, 541, 515, 487, 318, 354, 371, 390, 395, 546, 497, 491, 489, 470, 330, 334, 332, 327, 395, 300, 226, 174, 157, 133, 202, 236, 257, 417, 428, 453, 464, 468, 479, 343, 366, 368, 376, 378, 535, 517, 523, 503, 335, 366, 391, 419, 443, 612, 520, 518, 559, 636, 499, 523, 516, 496, 477, 464, 611, 597, 597, 413, 417, 397, 383, 386, 412, 468, 713, 694, 446, 453, 438, 429, 417, 409, 549, 537, 525, 508, 353, 338, 327, 315, 408, 373, 353, 353, 363, 254, 295, 318, 327, 337, 497, 472, 421, 345, 286, 192, 215, 272, 303, 342, 505, 515, 517, 497, 326, 306, 270, 282, 338, 400, 620, 577, 536, 493, 332, 319, 330, 369, 414, 449, 594, 545, 515, 349, 392, 411, 416, 396, 494, 457, 450, 446, 435, 317, 319, 318, 313, 411, 398, 402, 393, 377, 254, 249, 229, 312, 332, 362, 391, 405, 425, 291, 349, 359, 352, 327, 413, 424, 448, 481, 507, 371, 405, 433, 435, 420, 520, 477, 494, 513, 342, 366, 333, 348, 390, 419, 454, 487, 748, 775, 544, 532, 517, 497, 501, 539, 582, 592, 796, 498, 477, 443, 421, 415, 426, 457, 669, 646, 608, 406, 397, 396, 400, 398, 515, 476, 455, 460, 326, 319, 308, 281, 342, 347, 356, 357, 358, 352, 257, 276, 282, 296, 428, 450, 458, 443, 386, 243, 210, 228, 279, 315, 454, 436, 417, 414, 426, 316, 323, 345, 371, 382, 499, 478, 457, 464, 335, 354, 354, 334, 480, 473, 503, 515, 507, 334, 352, 342, 335, 324, 421, 436, 476, 505, 511, 359, 342, 306, 389, 364, 385, 414, 459, 488, 338, 371, 338, 308, 414, 402, 422, 430, 436, 450, 336, 364, 367, 361, 411, 373, 422, 492, 554, 404, 419, 387, 361, 489, 436, 458, 500, 534, 547, 389, 368, 359, 358, 390, 609, 560, 518, 478, 320, 335, 343, 345, 349, 498, 488, 464, 443, 410, 288, 257, 267, 181, 154, 181, 246, 318, 376, 299, 335, 333, 345, 353, 491, 463, 450, 470, 333, 382, 405, 402, 377, 536, 527, 537, 540, 512, 339, 366, 398, 439, 469, 483, 693, 651, 670, 446, 470, 476, 489, 482, 455, 527, 486, 505, 561, 421, 477, 476, 449, 446, 434, 596, 588, 593, 406, 424, 415, 387, 366, 502, 489, 474, 453, 401, 278, 271, 281, 279, 399, 410, 416, 430, 457, 332, 353, 334, 309, 365, 325, 347, 381, 419, 464, 366, 372, 367, 458, 369, 400, 465, 525, 565, 409, 422, 419, 410, 382, 463, 459, 487, 516, 355, 393, 388, 391, 406, 425, 610, 558, 515, 478, 327, 329, 324, 319, 467, 441, 425, 397, 378, 259, 297, 304, 301, 389, 323, 299, 295, 308, 333, 257, 279, 287, 301, 444, 431, 426, 433, 441, 307, 339, 339, 347, 358, 377, 554, 537, 494, 460, 342, 397, 443, 452, 450, 513, 434, 430, 464, 342, 443, 489, 535, 540, 512, 502, 722, 755, 795, 574, 583, 571, 551, 526, 506, 631, 590, 588, 421, 452, 465, 455, 452, 436, 593, 566, 535, 344, 361, 357, 366, 372, 537, 491, 462, 439, 401, 265, 260, 242, 365, 371, 400, 406, 417, 410, 287, 328, 332, 310, 339, 343, 385, 430, 465, 469, 319, 316, 291, 405, 386, 421, 469, 501, 491, 320, 324, 324, 357, 396, 414, 506, 417, 347],
    [226, 251, 300, 378, 424, 474, 532, 820, 824, 584, 579, 565, 551, 535, 522, 502, 673, 659, 440, 459, 469, 460, 470, 460, 474, 689, 680, 685, 487, 481, 478, 474, 464, 439, 602, 568, 568, 386, 395, 392, 385, 388, 530, 532, 537, 574, 587, 437, 444, 441, 426, 419, 531, 506, 477, 462, 320, 333, 334, 324, 452, 410, 392, 381, 373, 249, 284, 290, 284, 412, 391, 409, 415, 407, 396, 280, 279, 261, 333, 299, 290, 297, 316, 332, 230, 266, 289, 292, 435, 405, 401, 391, 357, 339, 232, 228, 289, 251, 256, 265, 282, 306, 328, 232, 286, 292, 301, 446, 422, 430, 455, 469, 492, 366, 381, 391, 390, 545, 468, 415, 378, 330, 223, 255, 267, 291, 315, 501, 521, 546, 556, 556, 409, 395, 396, 388, 388, 535, 527, 517, 527, 373, 398, 407, 405, 405, 563, 503, 455, 411, 233, 224, 244, 190, 228, 271, 325, 406, 476, 545, 419, 453, 472, 483, 477, 458, 651, 602, 588, 390, 411, 406, 397, 381, 540, 503, 507, 529, 565, 411, 450, 465, 493, 498, 496, 717, 660, 627, 422, 417, 414, 398, 378, 539, 520, 532, 564, 595, 427, 445, 468, 498, 489, 497, 722, 671, 645, 422, 439, 411, 401, 381, 519, 488, 468, 458, 443, 316, 310, 297, 296, 399, 405, 415, 428, 436, 307, 321, 323, 311, 408, 373, 376, 369, 381, 392, 303, 304, 304, 431, 377, 351, 320, 294, 273, 202, 220, 233, 371, 373, 391, 405, 420, 429, 293, 324, 333, 333, 335, 460, 452, 446, 441, 443, 317, 343, 353, 368, 383, 570, 550, 542, 518, 333, 344, 324, 305, 422, 410, 435, 462, 500, 534, 399, 415, 428, 433, 426, 602, 558, 550, 541, 371, 387, 400, 410, 415, 425, 613, 583, 584, 564, 390, 392, 335, 426, 345, 323, 337, 382, 429, 311, 377, 411, 448, 482, 479, 507, 703, 672, 651, 454, 433, 431, 416, 415, 587, 558, 556, 551, 378, 390, 392, 395, 409, 416, 640, 635, 640, 424, 444, 414, 390, 364, 439, 397, 376, 375, 388, 295, 319, 343, 345, 372, 588, 598, 617, 627, 428, 443, 421, 395, 369, 449, 385, 351, 321, 325, 247, 286, 310, 319, 344, 486, 505, 511, 506, 345, 361, 359, 348, 372, 515, 489, 473, 455, 446, 321, 324, 330, 323, 476, 474, 478, 472, 465, 322, 332, 325, 324, 442, 416, 407, 420, 419, 425, 317, 323, 323, 320, 435, 421, 422, 417, 424, 295, 319, 314, 313, 454, 452, 460, 488, 500, 341, 372, 374, 359, 348, 422, 393, 377, 372, 376, 274, 297, 308, 318, 455, 452, 434, 426, 415, 275, 300, 300, 304, 451, 441, 455, 465, 474, 464, 328, 324, 308, 386, 329, 272, 231, 190, 160, 111, 157, 176, 267, 323, 366, 426, 473, 497, 539, 390, 409, 405, 410, 402, 580, 549, 566, 565, 385, 404, 393, 380, 362, 496, 487, 502, 522, 585, 454, 486, 523, 540, 546, 544, 530, 679, 647, 432, 435, 429, 441, 455, 464, 510, 518, 789, 530, 588, 594, 595, 579, 580, 553, 760, 662, 625, 425, 401, 391, 383, 383, 542, 532, 550, 555, 379, 409, 415, 411, 401, 396, 516, 492, 467, 441, 310, 297, 284, 374, 344, 351, 362, 377, 385, 274, 300, 297, 295, 378, 347, 333, 313, 305, 294, 219, 226, 226, 292, 299, 300, 303, 309, 311, 224, 247, 249, 256, 349, 353, 361, 368, 378, 387, 290, 303, 310, 313, 438, 421, 414, 390, 367, 255, 258, 249, 351, 335, 354, 381, 407, 443, 304, 361, 371, 380, 380, 381, 538, 544, 560, 582, 415, 436, 444, 431, 414, 526, 448, 397, 361, 224, 263, 261, 277, 330, 367, 594, 667, 690, 737, 531, 547, 565, 571, 558, 555, 547, 741, 717, 477, 505, 505, 505, 502, 503, 489, 660, 633, 623, 438, 448, 454, 474, 484, 513, 518, 748, 723, 491, 454, 438, 393, 367, 468, 458, 473, 497, 511, 363, 404, 407, 422, 430, 625, 577, 563, 522, 358, 358, 324, 320, 398, 381, 373, 375, 380, 390, 292, 292, 289, 405, 381, 373, 371, 354, 349, 248, 258, 275, 276, 367, 358, 353, 344, 343, 227, 255, 248, 257, 379, 378, 388, 397, 391, 381, 273, 263, 247, 294, 268, 261, 265, 279, 299, 212, 260, 271, 279, 409, 401, 416, 430, 434, 446, 327, 337, 339, 337, 460, 424, 402, 396, 410, 293, 315, 330, 339, 362, 516, 513, 520, 523, 529, 385, 390, 401, 397, 396, 551, 520, 518, 529, 375, 398, 424, 430, 446, 446, 604, 540, 501, 452, 304, 262, 310, 255, 246, 263, 328, 376, 416, 329, 385, 390, 417, 426, 425, 599, 574, 566, 378, 395, 397, 388, 382, 381, 531, 526, 522, 511, 358, 364, 378, 374, 390, 424, 637, 647, 691, 474, 499, 476, 472, 429, 578, 489, 468, 455, 463, 338, 372, 409, 426, 484, 502, 521, 761, 738, 493, 494, 482, 455, 431, 419, 565, 532, 513, 481, 335, 333, 324, 303, 387, 392, 404, 416, 435, 313, 345, 349, 354, 353, 460, 440, 426, 405, 387, 284, 275, 272, 350, 316, 308, 292, 301, 330, 248, 282, 295, 314, 437, 421, 410, 402, 391, 253, 295, 291, 297, 303, 423, 425, 435, 444, 459, 333, 352, 362, 369, 376, 523, 502, 492, 481, 319, 340, 329, 324, 333, 471, 477, 488, 497, 505, 362, 371, 369, 366, 366, 521, 510, 520, 526, 361, 386, 382, 382, 382, 388, 559, 573, 582, 585, 419, 419, 397, 352, 455, 380, 352, 325, 324, 251, 289, 315, 371, 398, 415, 662, 648, 665, 669, 474, 473, 476, 472, 462, 467, 616, 606, 592, 400, 421, 411, 404, 410, 414, 607, 606, 603, 405, 433, 441, 439, 433, 424, 564, 513, 494, 462, 311, 320, 310, 324, 327, 522, 554, 601, 607, 420, 445, 444, 422, 406, 493, 409, 363, 361, 371, 271, 311, 316, 342, 351, 501, 494, 498, 483, 327, 348, 347, 348, 351, 487, 463, 458, 453]
)

@cocotb.test()
async def test_audio(dut):

    for i in range(1, 4):
        samples = await audio_dump(dut, i)

        #print(samples)

        for j in range(len(samples)):
            assert abs(samples[j] - saved_samples[i-1][j]) <= 1


@cocotb.test()
async def test_sync(dut):
    await do_start(dut)

    dut._log.info("Test sync")

    await ClockCycles(dut.clk, 1)

    for i in range(25):
        vsync = 1 if i in (1, 2) else 0
        for j in range(800):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        vsync = 1 if i in (0, 1) else 0
        for j in range(24):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(72):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 1
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(128):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)

    # First frame
    for i in range(600):
        for j in range(799):  # TODO This is wrong
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            assert dut.rgb.value == 1
            await ClockCycles(dut.clk, 1)
        for j in range(25):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(72):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 1
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(128):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)

    for i in range(25):
        vsync = 1 if i in (1, 2) else 0
        for j in range(800):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        vsync = 1 if i in (0, 1) else 0
        for j in range(24):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(72):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 1
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(128):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)

    # Beginning second frame
    for i in range(25):
        for j in range(799):  # TODO This is wrong
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            assert dut.rgb.value == 1
            await ClockCycles(dut.clk, 1)
        for j in range(25):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(72):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 1
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(128):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)

async def frame_dump(dut, frame, filename):
    await do_start(dut, frame << 3)

    await ClockCycles(dut.clk, 1)

    for i in range(25):
        vsync = 1 if i in (1, 2) else 0
        for j in range(800):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        vsync = 1 if i in (0, 1) else 0
        for j in range(24):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(72):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 1
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(128):
            assert dut.vsync.value == vsync
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)

    
    image = Image.new("RGB", (800, 600))

    for i in range(600):
        for j in range(800):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            red = dut.red.value * 85
            green = dut.green.value * 85
            blue = dut.blue.value * 85
            image.putpixel((j, i), (red, green, blue))
            await ClockCycles(dut.clk, 1)
        for j in range(24):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(72):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 1
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)
        for j in range(128):
            assert dut.vsync.value == 0
            assert dut.hsync.value == 0
            assert dut.rgb.value == 0
            await ClockCycles(dut.clk, 1)

    image.save(filename)

@cocotb.test()
async def test_frames(dut):
    await frame_dump(dut,  2, "frame02.png")
    await frame_dump(dut,  4, "frame04.png")
    await frame_dump(dut,  8, "frame08.png")
    await frame_dump(dut, 12, "frame12.png")
    await frame_dump(dut, 13, "frame13.png")
    await frame_dump(dut, 14, "frame14.png")
    await frame_dump(dut, 16, "frame16.png")
    await frame_dump(dut, 17, "frame17.png")
    await frame_dump(dut, 18, "frame18.png")
    await frame_dump(dut, 19, "frame19.png")
    await frame_dump(dut, 20, "frame20.png")
    await frame_dump(dut, 23, "frame23.png")
    await frame_dump(dut, 24, "frame24.png")
    await frame_dump(dut, 28, "frame28.png")
